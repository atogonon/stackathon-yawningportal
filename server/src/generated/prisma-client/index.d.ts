// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  campaign: (where?: CampaignWhereInput) => Promise<boolean>;
  character: (where?: CharacterWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  campaign: (where: CampaignWhereUniqueInput) => CampaignNullablePromise;
  campaigns: (args?: {
    where?: CampaignWhereInput;
    orderBy?: CampaignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Campaign>;
  campaignsConnection: (args?: {
    where?: CampaignWhereInput;
    orderBy?: CampaignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CampaignConnectionPromise;
  character: (where: CharacterWhereUniqueInput) => CharacterNullablePromise;
  characters: (args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Character>;
  charactersConnection: (args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CharacterConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostNullablePromise;
  posts: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Post>;
  postsConnection: (args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCampaign: (data: CampaignCreateInput) => CampaignPromise;
  updateCampaign: (args: {
    data: CampaignUpdateInput;
    where: CampaignWhereUniqueInput;
  }) => CampaignPromise;
  updateManyCampaigns: (args: {
    data: CampaignUpdateManyMutationInput;
    where?: CampaignWhereInput;
  }) => BatchPayloadPromise;
  upsertCampaign: (args: {
    where: CampaignWhereUniqueInput;
    create: CampaignCreateInput;
    update: CampaignUpdateInput;
  }) => CampaignPromise;
  deleteCampaign: (where: CampaignWhereUniqueInput) => CampaignPromise;
  deleteManyCampaigns: (where?: CampaignWhereInput) => BatchPayloadPromise;
  createCharacter: (data: CharacterCreateInput) => CharacterPromise;
  updateCharacter: (args: {
    data: CharacterUpdateInput;
    where: CharacterWhereUniqueInput;
  }) => CharacterPromise;
  updateManyCharacters: (args: {
    data: CharacterUpdateManyMutationInput;
    where?: CharacterWhereInput;
  }) => BatchPayloadPromise;
  upsertCharacter: (args: {
    where: CharacterWhereUniqueInput;
    create: CharacterCreateInput;
    update: CharacterUpdateInput;
  }) => CharacterPromise;
  deleteCharacter: (where: CharacterWhereUniqueInput) => CharacterPromise;
  deleteManyCharacters: (where?: CharacterWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (args: {
    data: PostUpdateInput;
    where: PostWhereUniqueInput;
  }) => PostPromise;
  updateManyPosts: (args: {
    data: PostUpdateManyMutationInput;
    where?: PostWhereInput;
  }) => BatchPayloadPromise;
  upsertPost: (args: {
    where: PostWhereUniqueInput;
    create: PostCreateInput;
    update: PostUpdateInput;
  }) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  campaign: (
    where?: CampaignSubscriptionWhereInput
  ) => CampaignSubscriptionPayloadSubscription;
  character: (
    where?: CharacterSubscriptionWhereInput
  ) => CharacterSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CampaignOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type CharacterOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "race_ASC"
  | "race_DESC"
  | "class_ASC"
  | "class_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CampaignUpdateWithoutPostsDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneWithoutCampaignsInput>;
}

export type CampaignWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput;
  data: PostUpdateManyDataInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  campaigns_every?: Maybe<CampaignWhereInput>;
  campaigns_some?: Maybe<CampaignWhereInput>;
  campaigns_none?: Maybe<CampaignWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  characters_every?: Maybe<CharacterWhereInput>;
  characters_some?: Maybe<CharacterWhereInput>;
  characters_none?: Maybe<CharacterWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PostUpdateManyDataInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface CharacterWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  race?: Maybe<String>;
  race_not?: Maybe<String>;
  race_in?: Maybe<String[] | String>;
  race_not_in?: Maybe<String[] | String>;
  race_lt?: Maybe<String>;
  race_lte?: Maybe<String>;
  race_gt?: Maybe<String>;
  race_gte?: Maybe<String>;
  race_contains?: Maybe<String>;
  race_not_contains?: Maybe<String>;
  race_starts_with?: Maybe<String>;
  race_not_starts_with?: Maybe<String>;
  race_ends_with?: Maybe<String>;
  race_not_ends_with?: Maybe<String>;
  class?: Maybe<String>;
  class_not?: Maybe<String>;
  class_in?: Maybe<String[] | String>;
  class_not_in?: Maybe<String[] | String>;
  class_lt?: Maybe<String>;
  class_lte?: Maybe<String>;
  class_gt?: Maybe<String>;
  class_gte?: Maybe<String>;
  class_contains?: Maybe<String>;
  class_not_contains?: Maybe<String>;
  class_starts_with?: Maybe<String>;
  class_not_starts_with?: Maybe<String>;
  class_ends_with?: Maybe<String>;
  class_not_ends_with?: Maybe<String>;
  createdBy?: Maybe<UserWhereInput>;
  AND?: Maybe<CharacterWhereInput[] | CharacterWhereInput>;
  OR?: Maybe<CharacterWhereInput[] | CharacterWhereInput>;
  NOT?: Maybe<CharacterWhereInput[] | CharacterWhereInput>;
}

export interface CampaignCreateManyWithoutCreatedByInput {
  create?: Maybe<
    CampaignCreateWithoutCreatedByInput[] | CampaignCreateWithoutCreatedByInput
  >;
  connect?: Maybe<CampaignWhereUniqueInput[] | CampaignWhereUniqueInput>;
}

export interface UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput;
  create: UserCreateWithoutPostsInput;
}

export interface CampaignCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  posts?: Maybe<PostCreateManyWithoutCampaignInput>;
}

export interface CharacterUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    | CharacterCreateWithoutCreatedByInput[]
    | CharacterCreateWithoutCreatedByInput
  >;
  delete?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  connect?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  set?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  disconnect?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
  update?: Maybe<
    | CharacterUpdateWithWhereUniqueWithoutCreatedByInput[]
    | CharacterUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | CharacterUpsertWithWhereUniqueWithoutCreatedByInput[]
    | CharacterUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<CharacterScalarWhereInput[] | CharacterScalarWhereInput>;
  updateMany?: Maybe<
    | CharacterUpdateManyWithWhereNestedInput[]
    | CharacterUpdateManyWithWhereNestedInput
  >;
}

export interface CampaignUpdateInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneWithoutCampaignsInput>;
  posts?: Maybe<PostUpdateManyWithoutCampaignInput>;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PostWhereInput>;
  AND?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  OR?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
  NOT?: Maybe<PostSubscriptionWhereInput[] | PostSubscriptionWhereInput>;
}

export interface UserUpdateOneWithoutCampaignsInput {
  create?: Maybe<UserCreateWithoutCampaignsInput>;
  update?: Maybe<UserUpdateWithoutCampaignsDataInput>;
  upsert?: Maybe<UserUpsertWithoutCampaignsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CampaignSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CampaignWhereInput>;
  AND?: Maybe<
    CampaignSubscriptionWhereInput[] | CampaignSubscriptionWhereInput
  >;
  OR?: Maybe<CampaignSubscriptionWhereInput[] | CampaignSubscriptionWhereInput>;
  NOT?: Maybe<
    CampaignSubscriptionWhereInput[] | CampaignSubscriptionWhereInput
  >;
}

export interface UserUpdateWithoutCampaignsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutPostedByInput>;
  characters?: Maybe<CharacterUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  campaigns?: Maybe<CampaignUpdateManyWithoutCreatedByInput>;
  posts?: Maybe<PostUpdateManyWithoutPostedByInput>;
  characters?: Maybe<CharacterUpdateManyWithoutCreatedByInput>;
}

export interface PostUpdateManyWithoutPostedByInput {
  create?: Maybe<
    PostCreateWithoutPostedByInput[] | PostCreateWithoutPostedByInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutPostedByInput[]
    | PostUpdateWithWhereUniqueWithoutPostedByInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutPostedByInput[]
    | PostUpsertWithWhereUniqueWithoutPostedByInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface PostUpdateManyMutationInput {
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface PostUpdateWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutPostedByDataInput;
}

export interface PostUpdateInput {
  campaign?: Maybe<CampaignUpdateOneRequiredWithoutPostsInput>;
  postedBy?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface PostUpdateWithoutPostedByDataInput {
  campaign?: Maybe<CampaignUpdateOneRequiredWithoutPostsInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface CharacterUpdateManyMutationInput {
  name?: Maybe<String>;
  race?: Maybe<String>;
  class?: Maybe<String>;
}

export interface CampaignUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<CampaignCreateWithoutPostsInput>;
  update?: Maybe<CampaignUpdateWithoutPostsDataInput>;
  upsert?: Maybe<CampaignUpsertWithoutPostsInput>;
  connect?: Maybe<CampaignWhereUniqueInput>;
}

export interface UserUpsertWithoutCharactersInput {
  update: UserUpdateWithoutCharactersDataInput;
  create: UserCreateWithoutCharactersInput;
}

export interface CampaignUpdateManyMutationInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserUpdateOneWithoutCharactersInput {
  create?: Maybe<UserCreateWithoutCharactersInput>;
  update?: Maybe<UserUpdateWithoutCharactersDataInput>;
  upsert?: Maybe<UserUpsertWithoutCharactersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CampaignUpsertWithoutPostsInput {
  update: CampaignUpdateWithoutPostsDataInput;
  create: CampaignCreateWithoutPostsInput;
}

export interface CharacterUpdateInput {
  name?: Maybe<String>;
  race?: Maybe<String>;
  class?: Maybe<String>;
  createdBy?: Maybe<UserUpdateOneWithoutCharactersInput>;
}

export interface PostUpsertWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutPostedByDataInput;
  create: PostCreateWithoutPostedByInput;
}

export interface UserCreateOneWithoutCharactersInput {
  create?: Maybe<UserCreateWithoutCharactersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PostScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  OR?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  NOT?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
}

export interface UserCreateOneWithoutCampaignsInput {
  create?: Maybe<UserCreateWithoutCampaignsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PostWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  campaign?: Maybe<CampaignWhereInput>;
  postedBy?: Maybe<UserWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PostWhereInput[] | PostWhereInput>;
  OR?: Maybe<PostWhereInput[] | PostWhereInput>;
  NOT?: Maybe<PostWhereInput[] | PostWhereInput>;
}

export interface PostCreateManyWithoutPostedByInput {
  create?: Maybe<
    PostCreateWithoutPostedByInput[] | PostCreateWithoutPostedByInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface CampaignWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  createdBy?: Maybe<UserWhereInput>;
  posts_every?: Maybe<PostWhereInput>;
  posts_some?: Maybe<PostWhereInput>;
  posts_none?: Maybe<PostWhereInput>;
  AND?: Maybe<CampaignWhereInput[] | CampaignWhereInput>;
  OR?: Maybe<CampaignWhereInput[] | CampaignWhereInput>;
  NOT?: Maybe<CampaignWhereInput[] | CampaignWhereInput>;
}

export interface CampaignCreateOneWithoutPostsInput {
  create?: Maybe<CampaignCreateWithoutPostsInput>;
  connect?: Maybe<CampaignWhereUniqueInput>;
}

export interface PostUpsertWithWhereUniqueWithoutCampaignInput {
  where: PostWhereUniqueInput;
  update: PostUpdateWithoutCampaignDataInput;
  create: PostCreateWithoutCampaignInput;
}

export interface CharacterCreateManyWithoutCreatedByInput {
  create?: Maybe<
    | CharacterCreateWithoutCreatedByInput[]
    | CharacterCreateWithoutCreatedByInput
  >;
  connect?: Maybe<CharacterWhereUniqueInput[] | CharacterWhereUniqueInput>;
}

export interface CharacterUpdateWithWhereUniqueWithoutCreatedByInput {
  where: CharacterWhereUniqueInput;
  data: CharacterUpdateWithoutCreatedByDataInput;
}

export interface PostCreateManyWithoutCampaignInput {
  create?: Maybe<
    PostCreateWithoutCampaignInput[] | PostCreateWithoutCampaignInput
  >;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
}

export interface CharacterUpdateWithoutCreatedByDataInput {
  name?: Maybe<String>;
  race?: Maybe<String>;
  class?: Maybe<String>;
}

export interface UserCreateOneWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface CharacterUpsertWithWhereUniqueWithoutCreatedByInput {
  where: CharacterWhereUniqueInput;
  update: CharacterUpdateWithoutCreatedByDataInput;
  create: CharacterCreateWithoutCreatedByInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface CharacterScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  race?: Maybe<String>;
  race_not?: Maybe<String>;
  race_in?: Maybe<String[] | String>;
  race_not_in?: Maybe<String[] | String>;
  race_lt?: Maybe<String>;
  race_lte?: Maybe<String>;
  race_gt?: Maybe<String>;
  race_gte?: Maybe<String>;
  race_contains?: Maybe<String>;
  race_not_contains?: Maybe<String>;
  race_starts_with?: Maybe<String>;
  race_not_starts_with?: Maybe<String>;
  race_ends_with?: Maybe<String>;
  race_not_ends_with?: Maybe<String>;
  class?: Maybe<String>;
  class_not?: Maybe<String>;
  class_in?: Maybe<String[] | String>;
  class_not_in?: Maybe<String[] | String>;
  class_lt?: Maybe<String>;
  class_lte?: Maybe<String>;
  class_gt?: Maybe<String>;
  class_gte?: Maybe<String>;
  class_contains?: Maybe<String>;
  class_not_contains?: Maybe<String>;
  class_starts_with?: Maybe<String>;
  class_not_starts_with?: Maybe<String>;
  class_ends_with?: Maybe<String>;
  class_not_ends_with?: Maybe<String>;
  AND?: Maybe<CharacterScalarWhereInput[] | CharacterScalarWhereInput>;
  OR?: Maybe<CharacterScalarWhereInput[] | CharacterScalarWhereInput>;
  NOT?: Maybe<CharacterScalarWhereInput[] | CharacterScalarWhereInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface CharacterUpdateManyWithWhereNestedInput {
  where: CharacterScalarWhereInput;
  data: CharacterUpdateManyDataInput;
}

export type CharacterWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CharacterUpdateManyDataInput {
  name?: Maybe<String>;
  race?: Maybe<String>;
  class?: Maybe<String>;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpsertWithoutCampaignsInput {
  update: UserUpdateWithoutCampaignsDataInput;
  create: UserCreateWithoutCampaignsInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface PostUpdateManyWithoutCampaignInput {
  create?: Maybe<
    PostCreateWithoutCampaignInput[] | PostCreateWithoutCampaignInput
  >;
  delete?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  connect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  set?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  disconnect?: Maybe<PostWhereUniqueInput[] | PostWhereUniqueInput>;
  update?: Maybe<
    | PostUpdateWithWhereUniqueWithoutCampaignInput[]
    | PostUpdateWithWhereUniqueWithoutCampaignInput
  >;
  upsert?: Maybe<
    | PostUpsertWithWhereUniqueWithoutCampaignInput[]
    | PostUpsertWithWhereUniqueWithoutCampaignInput
  >;
  deleteMany?: Maybe<PostScalarWhereInput[] | PostScalarWhereInput>;
  updateMany?: Maybe<
    PostUpdateManyWithWhereNestedInput[] | PostUpdateManyWithWhereNestedInput
  >;
}

export interface CharacterCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  race: String;
  class: String;
  createdBy?: Maybe<UserCreateOneWithoutCharactersInput>;
}

export interface PostUpdateWithWhereUniqueWithoutCampaignInput {
  where: PostWhereUniqueInput;
  data: PostUpdateWithoutCampaignDataInput;
}

export interface UserCreateWithoutCampaignsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  posts?: Maybe<PostCreateManyWithoutPostedByInput>;
  characters?: Maybe<CharacterCreateManyWithoutCreatedByInput>;
}

export interface PostUpdateWithoutCampaignDataInput {
  postedBy?: Maybe<UserUpdateOneRequiredWithoutPostsInput>;
  title?: Maybe<String>;
  content?: Maybe<String>;
}

export interface CampaignCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  createdBy?: Maybe<UserCreateOneWithoutCampaignsInput>;
}

export interface UserUpdateOneRequiredWithoutPostsInput {
  create?: Maybe<UserCreateWithoutPostsInput>;
  update?: Maybe<UserUpdateWithoutPostsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPostsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PostCreateWithoutCampaignInput {
  id?: Maybe<ID_Input>;
  postedBy: UserCreateOneWithoutPostsInput;
  title: String;
  content: String;
}

export interface UserUpdateWithoutPostsDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  campaigns?: Maybe<CampaignUpdateManyWithoutCreatedByInput>;
  characters?: Maybe<CharacterUpdateManyWithoutCreatedByInput>;
}

export interface CharacterSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CharacterWhereInput>;
  AND?: Maybe<
    CharacterSubscriptionWhereInput[] | CharacterSubscriptionWhereInput
  >;
  OR?: Maybe<
    CharacterSubscriptionWhereInput[] | CharacterSubscriptionWhereInput
  >;
  NOT?: Maybe<
    CharacterSubscriptionWhereInput[] | CharacterSubscriptionWhereInput
  >;
}

export interface CampaignUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    CampaignCreateWithoutCreatedByInput[] | CampaignCreateWithoutCreatedByInput
  >;
  delete?: Maybe<CampaignWhereUniqueInput[] | CampaignWhereUniqueInput>;
  connect?: Maybe<CampaignWhereUniqueInput[] | CampaignWhereUniqueInput>;
  set?: Maybe<CampaignWhereUniqueInput[] | CampaignWhereUniqueInput>;
  disconnect?: Maybe<CampaignWhereUniqueInput[] | CampaignWhereUniqueInput>;
  update?: Maybe<
    | CampaignUpdateWithWhereUniqueWithoutCreatedByInput[]
    | CampaignUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | CampaignUpsertWithWhereUniqueWithoutCreatedByInput[]
    | CampaignUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<CampaignScalarWhereInput[] | CampaignScalarWhereInput>;
  updateMany?: Maybe<
    | CampaignUpdateManyWithWhereNestedInput[]
    | CampaignUpdateManyWithWhereNestedInput
  >;
}

export interface PostCreateInput {
  id?: Maybe<ID_Input>;
  campaign: CampaignCreateOneWithoutPostsInput;
  postedBy: UserCreateOneWithoutPostsInput;
  title: String;
  content: String;
}

export interface CampaignUpdateWithWhereUniqueWithoutCreatedByInput {
  where: CampaignWhereUniqueInput;
  data: CampaignUpdateWithoutCreatedByDataInput;
}

export interface UserCreateWithoutCharactersInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  campaigns?: Maybe<CampaignCreateManyWithoutCreatedByInput>;
  posts?: Maybe<PostCreateManyWithoutPostedByInput>;
}

export interface CampaignUpdateWithoutCreatedByDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
  posts?: Maybe<PostUpdateManyWithoutCampaignInput>;
}

export interface PostCreateWithoutPostedByInput {
  id?: Maybe<ID_Input>;
  campaign: CampaignCreateOneWithoutPostsInput;
  title: String;
  content: String;
}

export interface CampaignUpdateManyDataInput {
  title?: Maybe<String>;
  description?: Maybe<String>;
}

export interface CampaignUpdateManyWithWhereNestedInput {
  where: CampaignScalarWhereInput;
  data: CampaignUpdateManyDataInput;
}

export interface CampaignScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CampaignScalarWhereInput[] | CampaignScalarWhereInput>;
  OR?: Maybe<CampaignScalarWhereInput[] | CampaignScalarWhereInput>;
  NOT?: Maybe<CampaignScalarWhereInput[] | CampaignScalarWhereInput>;
}

export interface CampaignUpsertWithWhereUniqueWithoutCreatedByInput {
  where: CampaignWhereUniqueInput;
  update: CampaignUpdateWithoutCreatedByDataInput;
  create: CampaignCreateWithoutCreatedByInput;
}

export interface CharacterCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  race: String;
  class: String;
}

export interface CampaignCreateInput {
  id?: Maybe<ID_Input>;
  title: String;
  description: String;
  createdBy?: Maybe<UserCreateOneWithoutCampaignsInput>;
  posts?: Maybe<PostCreateManyWithoutCampaignInput>;
}

export interface UserUpdateWithoutCharactersDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  campaigns?: Maybe<CampaignUpdateManyWithoutCreatedByInput>;
  posts?: Maybe<PostUpdateManyWithoutPostedByInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  campaigns?: Maybe<CampaignCreateManyWithoutCreatedByInput>;
  posts?: Maybe<PostCreateManyWithoutPostedByInput>;
  characters?: Maybe<CharacterCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutPostsInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  campaigns?: Maybe<CampaignCreateManyWithoutCreatedByInput>;
  characters?: Maybe<CharacterCreateManyWithoutCreatedByInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface CampaignEdge {
  node: Campaign;
  cursor: String;
}

export interface CampaignEdgePromise
  extends Promise<CampaignEdge>,
    Fragmentable {
  node: <T = CampaignPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CampaignEdgeSubscription
  extends Promise<AsyncIterator<CampaignEdge>>,
    Fragmentable {
  node: <T = CampaignSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  campaigns: <T = FragmentableArray<Campaign>>(args?: {
    where?: CampaignWhereInput;
    orderBy?: CampaignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  characters: <T = FragmentableArray<Character>>(args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  campaigns: <T = Promise<AsyncIterator<CampaignSubscription>>>(args?: {
    where?: CampaignWhereInput;
    orderBy?: CampaignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  characters: <T = Promise<AsyncIterator<CharacterSubscription>>>(args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  campaigns: <T = FragmentableArray<Campaign>>(args?: {
    where?: CampaignWhereInput;
    orderBy?: CampaignOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  characters: <T = FragmentableArray<Character>>(args?: {
    where?: CharacterWhereInput;
    orderBy?: CharacterOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateCampaign {
  count: Int;
}

export interface AggregateCampaignPromise
  extends Promise<AggregateCampaign>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCampaignSubscription
  extends Promise<AsyncIterator<AggregateCampaign>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node: Post;
  updatedFields: String[];
  previousValues: PostPreviousValues;
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface Post {
  id: ID_Output;
  title: String;
  content: String;
  createdAt: DateTimeOutput;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  campaign: <T = CampaignPromise>() => T;
  postedBy: <T = UserPromise>() => T;
  title: () => Promise<String>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  campaign: <T = CampaignSubscription>() => T;
  postedBy: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PostNullablePromise
  extends Promise<Post | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  campaign: <T = CampaignPromise>() => T;
  postedBy: <T = UserPromise>() => T;
  title: () => Promise<String>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  content: String;
  createdAt: DateTimeOutput;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface CampaignConnection {
  pageInfo: PageInfo;
  edges: CampaignEdge[];
}

export interface CampaignConnectionPromise
  extends Promise<CampaignConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CampaignEdge>>() => T;
  aggregate: <T = AggregateCampaignPromise>() => T;
}

export interface CampaignConnectionSubscription
  extends Promise<AsyncIterator<CampaignConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CampaignEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCampaignSubscription>() => T;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Campaign {
  id: ID_Output;
  title: String;
  description: String;
  createdAt: DateTimeOutput;
}

export interface CampaignPromise extends Promise<Campaign>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CampaignSubscription
  extends Promise<AsyncIterator<Campaign>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdBy: <T = UserSubscription>() => T;
  posts: <T = Promise<AsyncIterator<PostSubscription>>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CampaignNullablePromise
  extends Promise<Campaign | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  createdBy: <T = UserPromise>() => T;
  posts: <T = FragmentableArray<Post>>(args?: {
    where?: PostWhereInput;
    orderBy?: PostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateCharacter {
  count: Int;
}

export interface AggregateCharacterPromise
  extends Promise<AggregateCharacter>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCharacterSubscription
  extends Promise<AsyncIterator<AggregateCharacter>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CampaignSubscriptionPayload {
  mutation: MutationType;
  node: Campaign;
  updatedFields: String[];
  previousValues: CampaignPreviousValues;
}

export interface CampaignSubscriptionPayloadPromise
  extends Promise<CampaignSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CampaignPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CampaignPreviousValuesPromise>() => T;
}

export interface CampaignSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CampaignSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CampaignSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CampaignPreviousValuesSubscription>() => T;
}

export interface CharacterConnection {
  pageInfo: PageInfo;
  edges: CharacterEdge[];
}

export interface CharacterConnectionPromise
  extends Promise<CharacterConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CharacterEdge>>() => T;
  aggregate: <T = AggregateCharacterPromise>() => T;
}

export interface CharacterConnectionSubscription
  extends Promise<AsyncIterator<CharacterConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CharacterEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCharacterSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CharacterPreviousValues {
  id: ID_Output;
  name: String;
  race: String;
  class: String;
}

export interface CharacterPreviousValuesPromise
  extends Promise<CharacterPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  race: () => Promise<String>;
  class: () => Promise<String>;
}

export interface CharacterPreviousValuesSubscription
  extends Promise<AsyncIterator<CharacterPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  race: () => Promise<AsyncIterator<String>>;
  class: () => Promise<AsyncIterator<String>>;
}

export interface CharacterSubscriptionPayload {
  mutation: MutationType;
  node: Character;
  updatedFields: String[];
  previousValues: CharacterPreviousValues;
}

export interface CharacterSubscriptionPayloadPromise
  extends Promise<CharacterSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CharacterPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CharacterPreviousValuesPromise>() => T;
}

export interface CharacterSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CharacterSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CharacterSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CharacterPreviousValuesSubscription>() => T;
}

export interface Character {
  id: ID_Output;
  name: String;
  race: String;
  class: String;
}

export interface CharacterPromise extends Promise<Character>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  race: () => Promise<String>;
  class: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
}

export interface CharacterSubscription
  extends Promise<AsyncIterator<Character>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  race: () => Promise<AsyncIterator<String>>;
  class: () => Promise<AsyncIterator<String>>;
  createdBy: <T = UserSubscription>() => T;
}

export interface CharacterNullablePromise
  extends Promise<Character | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  race: () => Promise<String>;
  class: () => Promise<String>;
  createdBy: <T = UserPromise>() => T;
}

export interface CampaignPreviousValues {
  id: ID_Output;
  title: String;
  description: String;
  createdAt: DateTimeOutput;
}

export interface CampaignPreviousValuesPromise
  extends Promise<CampaignPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface CampaignPreviousValuesSubscription
  extends Promise<AsyncIterator<CampaignPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CharacterEdge {
  node: Character;
  cursor: String;
}

export interface CharacterEdgePromise
  extends Promise<CharacterEdge>,
    Fragmentable {
  node: <T = CharacterPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CharacterEdgeSubscription
  extends Promise<AsyncIterator<CharacterEdge>>,
    Fragmentable {
  node: <T = CharacterSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Campaign",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "Character",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
