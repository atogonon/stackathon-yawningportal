module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateCampaign {
  count: Int!
}

type AggregateCharacter {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Campaign {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime!
  createdBy: User
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}

type CampaignConnection {
  pageInfo: PageInfo!
  edges: [CampaignEdge]!
  aggregate: AggregateCampaign!
}

input CampaignCreateInput {
  id: ID
  title: String!
  description: String!
  createdBy: UserCreateOneWithoutCampaignsInput
  posts: PostCreateManyWithoutCampaignInput
}

input CampaignCreateManyWithoutCreatedByInput {
  create: [CampaignCreateWithoutCreatedByInput!]
  connect: [CampaignWhereUniqueInput!]
}

input CampaignCreateOneWithoutPostsInput {
  create: CampaignCreateWithoutPostsInput
  connect: CampaignWhereUniqueInput
}

input CampaignCreateWithoutCreatedByInput {
  id: ID
  title: String!
  description: String!
  posts: PostCreateManyWithoutCampaignInput
}

input CampaignCreateWithoutPostsInput {
  id: ID
  title: String!
  description: String!
  createdBy: UserCreateOneWithoutCampaignsInput
}

type CampaignEdge {
  node: Campaign!
  cursor: String!
}

enum CampaignOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  createdAt_ASC
  createdAt_DESC
}

type CampaignPreviousValues {
  id: ID!
  title: String!
  description: String!
  createdAt: DateTime!
}

input CampaignScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [CampaignScalarWhereInput!]
  OR: [CampaignScalarWhereInput!]
  NOT: [CampaignScalarWhereInput!]
}

type CampaignSubscriptionPayload {
  mutation: MutationType!
  node: Campaign
  updatedFields: [String!]
  previousValues: CampaignPreviousValues
}

input CampaignSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CampaignWhereInput
  AND: [CampaignSubscriptionWhereInput!]
  OR: [CampaignSubscriptionWhereInput!]
  NOT: [CampaignSubscriptionWhereInput!]
}

input CampaignUpdateInput {
  title: String
  description: String
  createdBy: UserUpdateOneWithoutCampaignsInput
  posts: PostUpdateManyWithoutCampaignInput
}

input CampaignUpdateManyDataInput {
  title: String
  description: String
}

input CampaignUpdateManyMutationInput {
  title: String
  description: String
}

input CampaignUpdateManyWithoutCreatedByInput {
  create: [CampaignCreateWithoutCreatedByInput!]
  delete: [CampaignWhereUniqueInput!]
  connect: [CampaignWhereUniqueInput!]
  set: [CampaignWhereUniqueInput!]
  disconnect: [CampaignWhereUniqueInput!]
  update: [CampaignUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [CampaignUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [CampaignScalarWhereInput!]
  updateMany: [CampaignUpdateManyWithWhereNestedInput!]
}

input CampaignUpdateManyWithWhereNestedInput {
  where: CampaignScalarWhereInput!
  data: CampaignUpdateManyDataInput!
}

input CampaignUpdateOneRequiredWithoutPostsInput {
  create: CampaignCreateWithoutPostsInput
  update: CampaignUpdateWithoutPostsDataInput
  upsert: CampaignUpsertWithoutPostsInput
  connect: CampaignWhereUniqueInput
}

input CampaignUpdateWithoutCreatedByDataInput {
  title: String
  description: String
  posts: PostUpdateManyWithoutCampaignInput
}

input CampaignUpdateWithoutPostsDataInput {
  title: String
  description: String
  createdBy: UserUpdateOneWithoutCampaignsInput
}

input CampaignUpdateWithWhereUniqueWithoutCreatedByInput {
  where: CampaignWhereUniqueInput!
  data: CampaignUpdateWithoutCreatedByDataInput!
}

input CampaignUpsertWithoutPostsInput {
  update: CampaignUpdateWithoutPostsDataInput!
  create: CampaignCreateWithoutPostsInput!
}

input CampaignUpsertWithWhereUniqueWithoutCreatedByInput {
  where: CampaignWhereUniqueInput!
  update: CampaignUpdateWithoutCreatedByDataInput!
  create: CampaignCreateWithoutCreatedByInput!
}

input CampaignWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdBy: UserWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  AND: [CampaignWhereInput!]
  OR: [CampaignWhereInput!]
  NOT: [CampaignWhereInput!]
}

input CampaignWhereUniqueInput {
  id: ID
}

type Character {
  id: ID!
  name: String!
  race: String!
  class: String!
  createdBy: User
}

type CharacterConnection {
  pageInfo: PageInfo!
  edges: [CharacterEdge]!
  aggregate: AggregateCharacter!
}

input CharacterCreateInput {
  id: ID
  name: String!
  race: String!
  class: String!
  createdBy: UserCreateOneWithoutCharactersInput
}

input CharacterCreateManyWithoutCreatedByInput {
  create: [CharacterCreateWithoutCreatedByInput!]
  connect: [CharacterWhereUniqueInput!]
}

input CharacterCreateWithoutCreatedByInput {
  id: ID
  name: String!
  race: String!
  class: String!
}

type CharacterEdge {
  node: Character!
  cursor: String!
}

enum CharacterOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  race_ASC
  race_DESC
  class_ASC
  class_DESC
}

type CharacterPreviousValues {
  id: ID!
  name: String!
  race: String!
  class: String!
}

input CharacterScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  race: String
  race_not: String
  race_in: [String!]
  race_not_in: [String!]
  race_lt: String
  race_lte: String
  race_gt: String
  race_gte: String
  race_contains: String
  race_not_contains: String
  race_starts_with: String
  race_not_starts_with: String
  race_ends_with: String
  race_not_ends_with: String
  class: String
  class_not: String
  class_in: [String!]
  class_not_in: [String!]
  class_lt: String
  class_lte: String
  class_gt: String
  class_gte: String
  class_contains: String
  class_not_contains: String
  class_starts_with: String
  class_not_starts_with: String
  class_ends_with: String
  class_not_ends_with: String
  AND: [CharacterScalarWhereInput!]
  OR: [CharacterScalarWhereInput!]
  NOT: [CharacterScalarWhereInput!]
}

type CharacterSubscriptionPayload {
  mutation: MutationType!
  node: Character
  updatedFields: [String!]
  previousValues: CharacterPreviousValues
}

input CharacterSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CharacterWhereInput
  AND: [CharacterSubscriptionWhereInput!]
  OR: [CharacterSubscriptionWhereInput!]
  NOT: [CharacterSubscriptionWhereInput!]
}

input CharacterUpdateInput {
  name: String
  race: String
  class: String
  createdBy: UserUpdateOneWithoutCharactersInput
}

input CharacterUpdateManyDataInput {
  name: String
  race: String
  class: String
}

input CharacterUpdateManyMutationInput {
  name: String
  race: String
  class: String
}

input CharacterUpdateManyWithoutCreatedByInput {
  create: [CharacterCreateWithoutCreatedByInput!]
  delete: [CharacterWhereUniqueInput!]
  connect: [CharacterWhereUniqueInput!]
  set: [CharacterWhereUniqueInput!]
  disconnect: [CharacterWhereUniqueInput!]
  update: [CharacterUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [CharacterUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [CharacterScalarWhereInput!]
  updateMany: [CharacterUpdateManyWithWhereNestedInput!]
}

input CharacterUpdateManyWithWhereNestedInput {
  where: CharacterScalarWhereInput!
  data: CharacterUpdateManyDataInput!
}

input CharacterUpdateWithoutCreatedByDataInput {
  name: String
  race: String
  class: String
}

input CharacterUpdateWithWhereUniqueWithoutCreatedByInput {
  where: CharacterWhereUniqueInput!
  data: CharacterUpdateWithoutCreatedByDataInput!
}

input CharacterUpsertWithWhereUniqueWithoutCreatedByInput {
  where: CharacterWhereUniqueInput!
  update: CharacterUpdateWithoutCreatedByDataInput!
  create: CharacterCreateWithoutCreatedByInput!
}

input CharacterWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  race: String
  race_not: String
  race_in: [String!]
  race_not_in: [String!]
  race_lt: String
  race_lte: String
  race_gt: String
  race_gte: String
  race_contains: String
  race_not_contains: String
  race_starts_with: String
  race_not_starts_with: String
  race_ends_with: String
  race_not_ends_with: String
  class: String
  class_not: String
  class_in: [String!]
  class_not_in: [String!]
  class_lt: String
  class_lte: String
  class_gt: String
  class_gte: String
  class_contains: String
  class_not_contains: String
  class_starts_with: String
  class_not_starts_with: String
  class_ends_with: String
  class_not_ends_with: String
  createdBy: UserWhereInput
  AND: [CharacterWhereInput!]
  OR: [CharacterWhereInput!]
  NOT: [CharacterWhereInput!]
}

input CharacterWhereUniqueInput {
  id: ID
}

scalar DateTime

scalar Long

type Mutation {
  createCampaign(data: CampaignCreateInput!): Campaign!
  updateCampaign(data: CampaignUpdateInput!, where: CampaignWhereUniqueInput!): Campaign
  updateManyCampaigns(data: CampaignUpdateManyMutationInput!, where: CampaignWhereInput): BatchPayload!
  upsertCampaign(where: CampaignWhereUniqueInput!, create: CampaignCreateInput!, update: CampaignUpdateInput!): Campaign!
  deleteCampaign(where: CampaignWhereUniqueInput!): Campaign
  deleteManyCampaigns(where: CampaignWhereInput): BatchPayload!
  createCharacter(data: CharacterCreateInput!): Character!
  updateCharacter(data: CharacterUpdateInput!, where: CharacterWhereUniqueInput!): Character
  updateManyCharacters(data: CharacterUpdateManyMutationInput!, where: CharacterWhereInput): BatchPayload!
  upsertCharacter(where: CharacterWhereUniqueInput!, create: CharacterCreateInput!, update: CharacterUpdateInput!): Character!
  deleteCharacter(where: CharacterWhereUniqueInput!): Character
  deleteManyCharacters(where: CharacterWhereInput): BatchPayload!
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  campaign: Campaign!
  postedBy: User!
  title: String!
  content: String!
  createdAt: DateTime!
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  id: ID
  campaign: CampaignCreateOneWithoutPostsInput!
  postedBy: UserCreateOneWithoutPostsInput!
  title: String!
  content: String!
}

input PostCreateManyWithoutCampaignInput {
  create: [PostCreateWithoutCampaignInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateManyWithoutPostedByInput {
  create: [PostCreateWithoutPostedByInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutCampaignInput {
  id: ID
  postedBy: UserCreateOneWithoutPostsInput!
  title: String!
  content: String!
}

input PostCreateWithoutPostedByInput {
  id: ID
  campaign: CampaignCreateOneWithoutPostsInput!
  title: String!
  content: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  title: String!
  content: String!
  createdAt: DateTime!
}

input PostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  NOT: [PostSubscriptionWhereInput!]
}

input PostUpdateInput {
  campaign: CampaignUpdateOneRequiredWithoutPostsInput
  postedBy: UserUpdateOneRequiredWithoutPostsInput
  title: String
  content: String
}

input PostUpdateManyDataInput {
  title: String
  content: String
}

input PostUpdateManyMutationInput {
  title: String
  content: String
}

input PostUpdateManyWithoutCampaignInput {
  create: [PostCreateWithoutCampaignInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutCampaignInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutCampaignInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithoutPostedByInput {
  create: [PostCreateWithoutPostedByInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [PostScalarWhereInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutCampaignDataInput {
  postedBy: UserUpdateOneRequiredWithoutPostsInput
  title: String
  content: String
}

input PostUpdateWithoutPostedByDataInput {
  campaign: CampaignUpdateOneRequiredWithoutPostsInput
  title: String
  content: String
}

input PostUpdateWithWhereUniqueWithoutCampaignInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutCampaignDataInput!
}

input PostUpdateWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutPostedByDataInput!
}

input PostUpsertWithWhereUniqueWithoutCampaignInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutCampaignDataInput!
  create: PostCreateWithoutCampaignInput!
}

input PostUpsertWithWhereUniqueWithoutPostedByInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutPostedByDataInput!
  create: PostCreateWithoutPostedByInput!
}

input PostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  campaign: CampaignWhereInput
  postedBy: UserWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  campaign(where: CampaignWhereUniqueInput!): Campaign
  campaigns(where: CampaignWhereInput, orderBy: CampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Campaign]!
  campaignsConnection(where: CampaignWhereInput, orderBy: CampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CampaignConnection!
  character(where: CharacterWhereUniqueInput!): Character
  characters(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Character]!
  charactersConnection(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CharacterConnection!
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  campaign(where: CampaignSubscriptionWhereInput): CampaignSubscriptionPayload
  character(where: CharacterSubscriptionWhereInput): CharacterSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  campaigns(where: CampaignWhereInput, orderBy: CampaignOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Campaign!]
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  characters(where: CharacterWhereInput, orderBy: CharacterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Character!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  campaigns: CampaignCreateManyWithoutCreatedByInput
  posts: PostCreateManyWithoutPostedByInput
  characters: CharacterCreateManyWithoutCreatedByInput
}

input UserCreateOneWithoutCampaignsInput {
  create: UserCreateWithoutCampaignsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCharactersInput {
  create: UserCreateWithoutCharactersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCampaignsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  posts: PostCreateManyWithoutPostedByInput
  characters: CharacterCreateManyWithoutCreatedByInput
}

input UserCreateWithoutCharactersInput {
  id: ID
  name: String!
  email: String!
  password: String!
  campaigns: CampaignCreateManyWithoutCreatedByInput
  posts: PostCreateManyWithoutPostedByInput
}

input UserCreateWithoutPostsInput {
  id: ID
  name: String!
  email: String!
  password: String!
  campaigns: CampaignCreateManyWithoutCreatedByInput
  characters: CharacterCreateManyWithoutCreatedByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  campaigns: CampaignUpdateManyWithoutCreatedByInput
  posts: PostUpdateManyWithoutPostedByInput
  characters: CharacterUpdateManyWithoutCreatedByInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutCampaignsInput {
  create: UserCreateWithoutCampaignsInput
  update: UserUpdateWithoutCampaignsDataInput
  upsert: UserUpsertWithoutCampaignsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutCharactersInput {
  create: UserCreateWithoutCharactersInput
  update: UserUpdateWithoutCharactersDataInput
  upsert: UserUpsertWithoutCharactersInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCampaignsDataInput {
  name: String
  email: String
  password: String
  posts: PostUpdateManyWithoutPostedByInput
  characters: CharacterUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutCharactersDataInput {
  name: String
  email: String
  password: String
  campaigns: CampaignUpdateManyWithoutCreatedByInput
  posts: PostUpdateManyWithoutPostedByInput
}

input UserUpdateWithoutPostsDataInput {
  name: String
  email: String
  password: String
  campaigns: CampaignUpdateManyWithoutCreatedByInput
  characters: CharacterUpdateManyWithoutCreatedByInput
}

input UserUpsertWithoutCampaignsInput {
  update: UserUpdateWithoutCampaignsDataInput!
  create: UserCreateWithoutCampaignsInput!
}

input UserUpsertWithoutCharactersInput {
  update: UserUpdateWithoutCharactersDataInput!
  create: UserCreateWithoutCharactersInput!
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  campaigns_every: CampaignWhereInput
  campaigns_some: CampaignWhereInput
  campaigns_none: CampaignWhereInput
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
  characters_every: CharacterWhereInput
  characters_some: CharacterWhereInput
  characters_none: CharacterWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    